#+TITLE: Property-Based Testing

#+STARTUP: inlineimages
#+PROPERTY: header-args:haskell :results replace output
#+PROPERTY: header-args:haskell+ :noweb yes
#+PROPERTY: header-args:haskell+ :wrap result

* Property-Based Testing

We notice that example-based tests are more useful as:
- Explaining or showing what the code does
- Getting feedback from domain experts (BDD)
- Laying down an incremental path for the programmer to write the code (TDD)
- ...

Less useful to check the correctness of the code, because you can to a certain
extent test a single feature with a bunch of example-base tests, but the amount
of tests you need to write for interacting features will be exponential.

A better way will be to have computers write tests for us, to do that we need:
- A way to generate valid input for our code under test
- A set of post-conditions that must hold for the code under test (algebraic
  laws that we can turn into properties)

* Basics

Random data for type ~T~ is generated by a generator of type ~Gen T~ which is a
monad able to produce random element of ~T~ and has an associated *size*
parameter used to specify the "complexity" of the instance of ~T~ that is going
to be generated next (useful especially with the generation of potentially
infinite data structures).

#+BEGIN_SRC haskell :eval never

-- `arbitrary` will give you a generator for `a` as long as `a` has an instance
-- of the `Arbitrary` type class
arbitrary :: Arbitrary a => Gen a

-- Constant generator
pure :: a -> Gen a

-- Choose one of the different generators of `a`
oneof :: [Gen a] -> Gen a

-- Sometimes certain values are more interesting than others and you want to
-- generate more of these or some values are particularly complexed and you want
-- to generate less of these. In those cases you can use the `frequency`
-- combinator.
frequency :: [(Int, Gen a)] -> Gen a

-- You need n values of a certain type `a`
vectorOf :: Int -> Gen a -> Gen [a]

-- Or a bunch of `a`
listOf :: Gen a -> Gen [a]

-- If you need to refine (validate?) a generated value
suchThat :: Gen a -> (a -> Bool) -> Gen a

-- How to get and change the size of the generators to make sure your generator
-- will not diverge on possibly infinite data structures
sized :: (Int -> Gen a) -> Gen a
resize :: Int -> Gen a -> Gen a

-- Generate a tree
leaf :: a -> BTree a
branch :: BTree a -> BTree a -> BTree a


btGen :: Arbitrary a => Gen (BTree a)
btGen = sized $ \size ->
  frequency
    [ (1, fmap leaf arbitrary)
    , (size, do
        left <- resize (div size 2) btGen
        right <- resize (div size 2) btGen
        pure (branch left right))
    ]
#+END_SRC

* Writing Good Generators
#+BEGIN_QUOTE
Writing good generators is up to us.
#+END_QUOTE

** Test Your Generators Against Invariants
If our data type needs to hold some invariants, then always test your generators
against those invariants.

#+BEGIN_SRC haskell
:set -package QuickCheck
:set -XTypeApplications

import Test.QuickCheck
import Control.Monad
import Data.Foldable

:{
data Counter
  = WithLock Counter
  | Increment Int
  | Decrement Int
  deriving (Show, Eq)

validCounter :: Counter -> Bool
validCounter (WithLock (WithLock _)) = False
validCounter (WithLock c) = validCounter c
validCounter (Increment n) = n > 0
validCounter (Decrement n) = n > 0

instance Arbitrary Counter where
  arbitrary = do
    n <- suchThat arbitrary (> 0)
    oneof [ pure $ Increment n
          , pure $ Decrement n
          , pure $ WithLock (Increment n)
          , pure $ WithLock (Decrement n)
          ]

prop_validCounter :: Property
prop_validCounter = property validCounter
:}

sample (arbitrary @Counter)

quickCheckWithResult stdArgs { chatty = False } prop_validCounter >>= putStrLn . output
#+END_SRC

#+RESULTS:
#+begin_result
package flags have changed, resetting and loading new packages...
WithLock (Decrement 1)
WithLock (Decrement 1)
WithLock (Increment 1)
Increment 5
Increment 5
Increment 10
Increment 4
WithLock (Decrement 4)
WithLock (Decrement 4)
Increment 8
WithLock (Decrement 13)
+++ OK, passed 100 tests.
#+end_result

** Antipattern: Not Generating All Constructors
Make sure to generate all the possible type of terms in the algebra. Especially
how can we make sure that when the grammar will evolve we don't forget the newly
added constructors?

Process and discipline is the universal answer.

Then we can try to exploit feature of our programming language of choice to
raise an error or a warning in case we forgot one or more constructors. Examples
will be to use exhaustive pattern matching, macros, type derivation, ... both at
compile/type-checking time and run-time.

** Antipattern: Generating Implementations Directly
Do not use directly the data constructor to build the algebra terms, but always
use the constructors, aka the public interface we are given to our user.

Data constructors are dump, function constructors can be smart ðŸ˜ƒ.

At the end, using the public constructors, the arbitrary terms will be built
exactly as all other terms can be built by an user of the library.

By doing this you inevitably also test the "smartness" of the constructors.

** Antipattern: Generating Asymptotically Adversial Inputs
Generating multiple tests is good but if the execution costs more than the value
(the execution is slow and the majority of the tests are testing the same thing)
we are going to have a problem.

One first solution will be to ~discard~ tests that takes too much time as a
means to "instruct" QuickCheck to prefer "simpler" test cases.

#+BEGIN_SRC haskell :eval never
import Control.Exception
import System.Timeout

-- An error value that will instruct QuickCheck to discard the generated test,
-- in the same way as we had discarded the input with a predicate `==>`
-- discard :: a

-- timeout :: Int -> IO a -> IO (Maybe a)

-- ioProperty :: Testable prop => IO prop -> Property

-- seq :: a -> b -> b
-- Is needed to "force" to a certain extent the evaluation of `a` and `b` before
-- checking for equality. This is needed for Haskell's lazyness

quickly :: (Eq a, Show a) => a -> a -> Property
quickly a b =
  ioProperty
    $ fmap (fromMaybe discard)
    $ timeout 1
    $ evaluate
    $ a `seq` b `seq` a === b
#+END_SRC

** Antipattern: Generating Extremely Large Inputs
Too large inputs, or too complex inputs, can lead to slow tests, same problem as
before.

Solution here to tune the gnerators to less likely produce those terms than
needed.

** Antipattern: Generating Non-Representative Terms
Are we sure that we are generating all the "interesting" terms? Other questions
can be:
- Does this generator fail to produce a particular value?
- Does this generator produce well distributed values?

The solution is to tests the generators to check if they produce every term
type, and the distribution of the terms type.

* Showing
QuickCheck requires a ~Show~ instance for every value it generates.

If there are no good ways to have a ~Show~ instance for your type, then provide
an "orphan instance" only in the test module

#+BEGIN_SRC haskell :eval never
instance Show NotShowableType where
  show _ = "<NotShowableType>"
#+END_SRC

* Shrinking
If one of the property gets falsified by a randomly generated input, that input
gets "shrinked" to the smallest possible version of the same input able to
repreduce the same result.

In QuickCheck, whe you define your ~Arbitrary~ instance if you don't provide the
implementation for ~shrink :: a -> [a]~ then you will not get any shrinking and
the report will contain the orginally "complex" input.

In QuickCheck you can do it in a generic way (NDG: explain here what "generic"
means)

#+BEGIN_SRC haskell :eval never
:set -XDeriveGeneric

import GHC.Generics (Generic)

data MyType = -- ...
  deriving (Generic)

instance Arbitrary MyType where
  arbitrary = ...
  shrink = filter valid . genericShrink
#+END_SRC

* Using QuickCheck Interactively
When working with property tests we can think about tests in a more scentific
way.

We can make hypotheses (NDG: the best property test library for Python, a very
good library, is called "Hypotheses") about our implementation and use property
tests to confirm or deny those ideas.
